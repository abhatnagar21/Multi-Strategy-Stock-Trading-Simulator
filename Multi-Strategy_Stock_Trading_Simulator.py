# -*- coding: utf-8 -*-
"""trading strategy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TuxOJPJBvgNUDhQIM62Ly3esnrpGxFQr
"""

import yfinance as yf
import pandas as pd
import plotly.graph_objs as go #for defining the structure and style of the plots.
import plotly.io as pio#for managing figure rendering, saving, and loading.
import numpy as np
import matplotlib.pyplot as plt

pio.templates.default = "plotly_white"#set the theme to dark

ticker='TCS.NS'
data=yf.download(ticker,period='1y',interval='1d')
data.head()

rollingwindow=14 #taking 14 day of data for calculation
stoploss=0.05 #stoploss percentage
takeprfit=0.15 #take profit percentage of 10%
transfee=0.001 #transaction fees

data["Support"]=data["Low"].rolling(window=rollingwindow).min()#definig support being the lower band
data["Resistance"]=data["High"].rolling(window=rollingwindow).max()#defining resistance being upper band
fig,(ax1,ax2)=plt.subplots(2,1,sharex=True,figsize=(15,8))
"""
ax1.plot(data.index,data['Close'],label='Stock Price',)
ax1.plot(data.index,data['resistance'],label='Resistance')
ax1.plot(data.index,data['support'],label='Support')
ax1.legend()"""
fig=go.Figure()
fig.add_trace(go.Candlestick(x=data.index,open=data['Open'],high=data['High'],low=data['Low'],close=data['Close'],name='Stock Price'))#plotting stock price
fig.add_trace(go.Scatter(x=data.index,y=data['Resistance'],line=dict(color='red',width=1),name='Resistance'))#plotting resistance
fig.add_trace(go.Scatter(x=data.index,y=data['Support'],line=dict(color='green',width=1),name='Support'))#plotting support

#calculating rsi
def calc_rsi(series,window=14):
  delta=series.diff(1)#difference of current prie and previous price giving daily price change
  gain=delta.where(delta>0,0)#replacing losses as 0
  loss=-delta.where(delta<0,0)#if price decreased the loss are recorded multiplying by -1 to make it positive
  avggain=gain.rolling(window=window).mean()#calculating average gain
  avgloss=loss.rolling(window=window).mean()#calculating average loss
  rs=avggain/avgloss#calculating relative strength
  rsi=100-(100/(1+rs))#calculating relative strength index
  return rsi

data['RSI']=calc_rsi(data['Close'],window=rollingwindow)#calling the function
rsi_fig=go.Figure()
rsi_fig.add_trace(go.Scatter(x=data.index,y=data['RSI'],line=dict(color='blue',width=1),name='RSI'))#plotting rsi
rsi_fig.add_shape(type='line',x0=data.index[0],y0=70,x1=data.index[-1],y1=70,line=dict(color='red',width=1 ,dash="dash"))
rsi_fig.add_shape(type='line',x0=data.index[0],y0=30,x1=data.index[-1],y1=30,line=dict(color='green',width=1,dash="dash"))
rsi_fig.update_layout(title='Relative Strength Index',xaxis_title='Date',yaxis_title='RSI')
rsi_fig.show()

#calculating bollinger band
data['Middle_band']=data['Close'].rolling(window=rollingwindow).mean()
data['Upper_band']=data['Middle_band']+2*data['Close'].rolling(window=rollingwindow).std()
data['Lower_band']=data['Middle_band']-2*data['Close'].rolling(window=rollingwindow).std()
bb_fig=go.Figure()
#plotting bollinger band
bb_fig.add_trace(go.Scatter(x=data.index,y=data['Close'],line=dict(color='blue',width=1),name='Stock Price'))
bb_fig.add_trace(go.Scatter(x=data.index,y=data['Upper_band'],line=dict(color='red',width=1),name='Upper Band'))
bb_fig.add_trace(go.Scatter(x=data.index,y=data['Lower_band'],line=dict(color='green',width=1),name='Lower Band'))

#trading strategy
initial_cash=100000
def strategy():
  return{
      'cash':initial_cash,
      'holdings':0,
      'portfolio':initial_cash,
      'tradelog':[],
      'buysignals':[],
      'sellsignals':[],
      'entryprice':0,
      'wintrades':0,
      'losstrades':0,
      'maxdrawdown':0,
      'peakvalue':initial_cash
  }

strategies={
    'Support/Resistance':strategy(),
    'Bollinger Bands':strategy(),
    'RSI':strategy(),
}
#defining buy and sell signals
def buy_logic(strategy_vars, current_price, signal):
    if strategy_vars['cash'] > 0:
        strategy_vars['holdings'] = strategy_vars['cash'] / current_price * (1 - transfee)
        strategy_vars['cash'] = 0
        strategy_vars['portfolio'] = strategy_vars['holdings'] * current_price
        strategy_vars['entryprice'] = current_price
        strategy_vars['buysignals'].append((data.index[i], current_price))
        strategy_vars['tradelog'].append(f"Bought at {current_price:.2f} on {data.index[i]} using {signal}")
def sell_logic(strategy_vars, current_price, signal):
    if strategy_vars['holdings'] > 0:
        strategy_vars['cash'] = strategy_vars['holdings'] * current_price * (1 - transfee)
        strategy_vars['holdings'] = 0
        strategy_vars['portfolio'] = strategy_vars['cash']
        strategy_vars['sellsignals'].append((data.index[i], current_price))
        strategy_vars['tradelog'].append(f"Sold at {current_price:.2f} on {data.index[i]} using {signal}")
        if current_price >= strategy_vars['entryprice']:
            strategy_vars['wintrades'] += 1
        else:
            strategy_vars['losstrades'] += 1

for i in range(1, len(data)):
    current_price = data['Close'][i]

    for strategy_name, strategy_vars in strategies.items():
        # Update peak value and drawdown
        strategy_vars['portfolio'] = strategy_vars['cash'] + strategy_vars['holdings'] * current_price
        strategy_vars['peakvalue'] = max(strategy_vars['peakvalue'], strategy_vars['portfolio'])
        drawdown = (strategy_vars['peakvalue'] - strategy_vars['portfolio']) / strategy_vars['peakvalue']
        strategy_vars['maxdrawdown'] = max(strategy_vars['maxdrawdown'], drawdown)

        # Strategy specific logic
        if strategy_name == 'Support/Resistance':
            if current_price > data['Resistance'][i-1] and strategy_vars['cash'] > 0:
                buy_logic(strategy_vars, current_price, strategy_name)#buy if price> resistance
            elif current_price < data['Support'][i-1] and strategy_vars['holdings'] > 0:
                sell_logic(strategy_vars, current_price, strategy_name)#sell if price< support

        elif strategy_name == 'RSI':
            if data['RSI'][i] < 30 and strategy_vars['cash'] > 0:
                buy_logic(strategy_vars, current_price, strategy_name)# if rsi<30 then undervalued buy
            elif data['RSI'][i] > 70 and strategy_vars['holdings'] > 0:
                sell_logic(strategy_vars, current_price, strategy_name)# if rsi> 70 overvalued sell signal

        elif strategy_name == 'Bollinger Bands':
            if current_price < data['Lower_band'][i-1] and strategy_vars['cash'] > 0:
                buy_logic(strategy_vars, current_price, strategy_name)#if middle band greater than lower band buy
            elif current_price > data['Upper_band'][i-1] and strategy_vars['holdings'] > 0:
                sell_logic(strategy_vars, current_price, strategy_name)#if middle band greater than upper band sell

# Final portfolio values
final_values = {strategy_name: strategy_vars['cash'] + strategy_vars['holdings'] * data['Close'].iloc[-1] for strategy_name, strategy_vars in strategies.items()}

# Performance metrics
performance_metrics = {
    strategy_name: {
        'Final Portfolio Value': final_values[strategy_name],
        'Profit/Loss': final_values[strategy_name] - initial_cash,
        'Total Trades': strategy_vars['wintrades'] + strategy_vars['losstrades'],
        'Win Ratio': strategy_vars['wintrades'] / (strategy_vars['wintrades'] + strategy_vars['losstrades']) if strategy_vars['wintrades'] + strategy_vars['losstrades'] > 0 else 0,
        'Max Drawdown': strategy_vars['maxdrawdown']
    } for strategy_name, strategy_vars in strategies.items()
}

# Print performance metrics for each strategy
for strategy_name, metrics in performance_metrics.items():
    print(f"\n{strategy_name} Strategy:")
    for key, value in metrics.items():
        print(f"{key}: {value:.2f}" if isinstance(value, (float, int)) else f"{key}: {value}")

# Function to create a graph for a strategy
def create_strategy_graph(strategy_name, strategy_vars):
    fig = go.Figure()

    # Add candlestick chart
    fig.add_trace(go.Candlestick(
        x=data.index,
        open=data['Open'],
        high=data['High'],
        low=data['Low'],
        close=data['Close'],
        name='Candlesticks'
    ))

    # Add strategy specific indicators and signals
    if strategy_name == 'Support/Resistance':
        fig.add_trace(go.Scatter(
            x=data.index,
            y=data['Support'],
            mode='lines',
            line=dict(color='green', width=1),
            name='Support'
        ))
        fig.add_trace(go.Scatter(
            x=data.index,
            y=data['Resistance'],
            mode='lines',
            line=dict(color='red', width=1),
            name='Resistance'
        ))

    elif strategy_name == 'RSI':
        fig.add_trace(go.Scatter(
            x=data.index,
            y=[30] * len(data.index),
            mode='lines',
            line=dict(color='orange', width=1, dash='dash'),
            name='RSI 30'
        ))
        fig.add_trace(go.Scatter(
            x=data.index,
            y=[70] * len(data.index),
            mode='lines',
            line=dict(color='orange', width=1, dash='dash'),
            name='RSI 70'
        ))

    elif strategy_name == 'Bollinger Bands':
        fig.add_trace(go.Scatter(
            x=data.index,
            y=data['Middle_band'],
            mode='lines',
            line=dict(color='blue', width=1),
            name='Middle Band'
        ))
        fig.add_trace(go.Scatter(
            x=data.index,
            y=data['Upper_band'],
            mode='lines',
            line=dict(color='yellow', width=1, dash='dash'),
            name='Upper Band'
        ))
        fig.add_trace(go.Scatter(
            x=data.index,
            y=data['Lower_band'],
            mode='lines',
            line=dict(color='white', width=1, dash='dash'),
            name='Lower Band'
        ))

    # Add Buy/Sell Signals
    if strategy_vars['buysignals']:
        fig.add_trace(go.Scatter(
            x=[signal[0] for signal in strategy_vars['buysignals']],
            y=[signal[1] for signal in strategy_vars['buysignals']],
            mode='markers',
            marker=dict(color='green', size=10, symbol='triangle-up'),
            name='Buy Signals'
        ))

    if strategy_vars['sellsignals']:
        fig.add_trace(go.Scatter(
            x=[signal[0] for signal in strategy_vars['sellsignals']],
            y=[signal[1] for signal in strategy_vars['sellsignals']],
            mode='markers',
            marker=dict(color='red', size=10, symbol='triangle-down'),
            name='Sell Signals'
        ))

    # Update layout and show plot
    fig.update_layout(
        title=f"{strategy_name} Strategy for {ticker}",
        yaxis_title="Price",
        xaxis_title="Date",
        xaxis_rangeslider_visible=False
    )
    fig.show()

# Create and display the strategy graphs
for strategy_name, strategy_vars in strategies.items():
    create_strategy_graph(strategy_name, strategy_vars)

# Print performance metrics for each strategy
for strategy_name, metrics in performance_metrics.items():
    print(f"\n{strategy_name} Strategy:")

    # Print each metric for the strategy
    for key, value in metrics.items():
        print(f"{key}: {value:.2f}" if isinstance(value, (float, int)) else f"{key}: {value}")

    # Calculate profit/loss percentage
    final_portfolio_value = strategies[strategy_name]['portfolio']  # Assume this holds the final portfolio value
    profit_loss_percentage = ((final_portfolio_value - initial_cash) / initial_cash) * 100
    print(f"Profit/Loss Percentage: {profit_loss_percentage:.2f}%")  # Print the P/L percentage

    # Print the trade log (buying and selling prices)
    print("\nTrade Log:")
    for log in strategies[strategy_name]['tradelog']:
        print(log)
